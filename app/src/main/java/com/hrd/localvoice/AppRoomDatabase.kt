package com.hrd.localvoiceimport android.app.Applicationimport androidx.room.*import androidx.room.migration.AutoMigrationSpecimport androidx.room.migration.Migrationimport androidx.sqlite.db.SupportSQLiteDatabaseimport com.hrd.localvoice.dao.*import com.hrd.localvoice.models.*import com.hrd.localvoice.utils.Constantsimport com.hrd.localvoice.utils.StringListConvectorimport java.util.concurrent.ExecutorServiceimport java.util.concurrent.Executors@Database(    entities = [Audio::class, Participant::class, Image::class, Configuration::class, User::class, ActivityStatus::class],    version = 25,    autoMigrations = [        AutoMigration(from = 17, to = 18),        AutoMigration(from = 19, to = 20, spec = AppRoomDatabase.Migration19To20::class),        AutoMigration(from = 20, to = 21),        AutoMigration(from = 21, to = 22),        AutoMigration(from = 22, to = 23),        AutoMigration(from = 23, to = 24),    ])@TypeConverters(StringListConvector::class)abstract class AppRoomDatabase : RoomDatabase() {    abstract fun AudioDao(): AudioDao    abstract fun ParticipantDao(): ParticipantDao    abstract fun ImageDao(): ImageDao    abstract fun ConfigurationDao(): ConfigurationDao    abstract fun UserDao(): UserDao    companion object {        private const val LOCAL_LANG_DATABASE = "local_voice_database.sql"        private const val NUMBER_OF_THREADS = 4        private var mContext: Application? = null        var INSTANCE: AppRoomDatabase? = null        val databaseWriteExecutor: ExecutorService = Executors.newFixedThreadPool(NUMBER_OF_THREADS)        private val sRoomDatabaseCallback: Callback = object : Callback() {            override fun onOpen(db: SupportSQLiteDatabase) {                super.onOpen(db)                databaseWriteExecutor.execute {//                    val configurationDao: ConfigurationDao = INSTANCE!!.ConfigurationDao()//                    configurationDao.deleteAll()                }            }            override fun onCreate(db: SupportSQLiteDatabase) {                super.onCreate(db)                databaseWriteExecutor.execute {//                    val configurationDao: ConfigurationDao = INSTANCE!!.ConfigurationDao()//                    configurationDao.deleteAll()//                    val audioDao: AudioDao = INSTANCE!!.AudioDao()//                    val audios: List<Audio> = DummyData().getDummyAudios()//                    audioDao.insertAudios(audios)////                    val images: List<Image> = DummyData().getDummyImages()//                    val imageDao = INSTANCE!!.ImageDao()//                    imageDao.deleteAll()//                    imageDao.insertImages(images)                }            }        }        fun getDatabase(context: Application): AppRoomDatabase? {            mContext = context            if (INSTANCE == null) {                synchronized(AppRoomDatabase::class.java) {                    if (INSTANCE == null) {                        INSTANCE = Room.databaseBuilder(                            context.applicationContext,                            AppRoomDatabase::class.java,                            LOCAL_LANG_DATABASE                        ).addMigrations(migration18To19, migration24To25)                            .addCallback(sRoomDatabaseCallback)                            .build()                    }                }            }            return INSTANCE        }        // Migrations        val migration18To19 = object : Migration(18, 19) {            override fun migrate(database: SupportSQLiteDatabase) {                database.execSQL("CREATE TABLE IF NOT EXISTS activity_status (id INTEGER NOT NULL PRIMARY KEY)")            }        }        val migration24To25 = object : Migration(24, 25) {            override fun migrate(database: SupportSQLiteDatabase) {                database.execSQL("DELETE FROM configurations")            }        }    }    @RenameColumn(        tableName = Constants.CONFIGURATIONS_TABLE,        fromColumnName = "privacyPolicyStatementAudio",        toColumnName = "privacyPolicyStatementAudioRemoteUrl"    )    class Migration19To20 : AutoMigrationSpec}